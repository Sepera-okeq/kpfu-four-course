import sys
import random
from PyQt5.QtWidgets import (QApplication, QMainWindow, QVBoxLayout, QHBoxLayout, 
                             QLabel, QPushButton, QTextEdit, QWidget, QGraphicsView, 
                             QGraphicsScene, QLineEdit, QRadioButton, QButtonGroup,
                             QDockWidget, QTabWidget)
from PyQt5.QtGui import QPainter, QColor, QPen, QFont, QBrush
from PyQt5.QtCore import Qt, QPointF

class TextConverter:
    @staticmethod
    def text_to_binary(text):
        return ''.join(format(ord(char), '08b') for char in text)
    
    @staticmethod
    def binary_to_text(binary):
        binary_chars = [binary[i:i+8] for i in range(0, len(binary), 8)]
        return ''.join(chr(int(char, 2)) for char in binary_chars)

class HammingCode:
    @staticmethod
    def encode(data):
        """
        –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –º–µ—Ç–æ–¥—É –•–µ–º–º–∏–Ω–≥–∞
        """
        r = 1
        while (2**r < len(data) + r + 1):
            r += 1
        
        encoded = ['0'] * (len(data) + r)
        
        data_index = 0
        for i in range(1, len(encoded) + 1):
            if (i & (i-1)) != 0:  # –ù–µ –ø–æ–∑–∏—Ü–∏–∏ —Å—Ç–µ–ø–µ–Ω–µ–π 2
                encoded[i-1] = data[data_index]
                data_index += 1
        
        for i in range(r):
            pos = 2**i - 1
            parity = 0
            for j in range(pos, len(encoded), 2**(i+1)):
                for k in range(j, min(j + 2**i, len(encoded))):
                    if encoded[k] == '1':
                        parity ^= 1
            encoded[pos] = str(parity)
        
        return ''.join(encoded)

    @staticmethod
    def decode(encoded_data):
        """
        –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
        """
        r = 1
        while 2**r < len(encoded_data) + 1:
            r += 1
        
        error_pos = 0
        for i in range(r):
            pos = 2**i - 1
            parity = 0
            for j in range(pos, len(encoded_data), 2**(i+1)):
                for k in range(j, min(j + 2**i, len(encoded_data))):
                    if encoded_data[k] == '1':
                        parity ^= 1
            
            if parity != 0:
                error_pos += pos + 1
        
        if error_pos > 0:
            corrected_data = list(encoded_data)
            corrected_data[error_pos-1] = '0' if encoded_data[error_pos-1] == '1' else '1'
            encoded_data = ''.join(corrected_data)
        
        decoded = []
        for i in range(1, len(encoded_data) + 1):
            if (i & (i-1)) != 0:  # –ù–µ –ø–æ–∑–∏—Ü–∏–∏ —Å—Ç–µ–ø–µ–Ω–µ–π 2
                decoded.append(encoded_data[i-1])
        
        return ''.join(decoded), error_pos

class HammingCodeVisualizer(QMainWindow):
    def __init__(self):
        super().__init__()
        self.initUI()
        
    def initUI(self):
        self.setWindowTitle('–ö–æ–¥ –•–µ–º–º–∏–Ω–≥–∞')
        self.setGeometry(100, 100, 1600, 900)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QVBoxLayout(central_widget)
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        control_layout = QHBoxLayout()
        
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –≤–≤–æ–¥–∞
        input_type_group = QButtonGroup()
        self.text_radio = QRadioButton("–¢–µ–∫—Å—Ç")
        self.binary_radio = QRadioButton("–ë–∏–Ω–∞—Ä–Ω—ã–π")
        input_type_group.addButton(self.text_radio)
        input_type_group.addButton(self.binary_radio)
        self.text_radio.setChecked(True)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        self.input_field = QLineEdit()
        self.input_field.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ")
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        process_btn = QPushButton('–û–±—Ä–∞–±–æ—Ç–∞—Ç—å')
        process_btn.clicked.connect(self.process_input)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ layout
        control_layout.addWidget(self.text_radio)
        control_layout.addWidget(self.binary_radio)
        control_layout.addWidget(self.input_field)
        control_layout.addWidget(process_btn)
        
        # –°–æ–∑–¥–∞–µ–º TabWidget –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –ª–æ–≥–æ–≤
        self.tab_widget = QTabWidget()
        
        # –ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —Å—Ü–µ–Ω–∞
        self.scene = QGraphicsScene(self)
        self.view = QGraphicsView(self.scene)
        self.view.setRenderHint(QPainter.Antialiasing)
        
        # –õ–æ–≥–∏
        self.log_text = QTextEdit()
        self.log_text.setReadOnly(True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.tab_widget.addTab(self.view, "–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
        self.tab_widget.addTab(self.log_text, "–õ–æ–≥–∏")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤ –≥–ª–∞–≤–Ω—ã–π layout
        main_layout.addLayout(control_layout)
        main_layout.addWidget(self.tab_widget)
        
        # –°–æ–∑–¥–∞–µ–º Dock –≤–∏–¥–∂–µ—Ç –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        #self.info_dock = QDockWidget("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", self)
        #self.info_text = QTextEdit()
        #self.info_text.setReadOnly(True)
        #self.info_dock.setWidget(self.info_text)
        #self.addDockWidget(Qt.RightDockWidgetArea, self.info_dock)
        
        # –¶–≤–µ—Ç–∞
        self.soft_green = QColor(150, 200, 150)
        self.soft_red = QColor(200, 150, 150)
        self.soft_blue = QColor(150, 150, 200)
        
    def process_input(self):
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ü–µ–Ω—ã
        self.scene.clear()
        self.log_text.clear()
        #self.info_text.clear()
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        input_text = self.input_field.text()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if self.text_radio.isChecked():
            self.original_data = TextConverter.text_to_binary(input_text)
        else:
            self.original_data = input_text
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ –≤–≤–æ–¥–∞
        if not all(bit in '01' for bit in self.original_data):
            self.log_text.append("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –±–∏–Ω–∞—Ä–Ω—ã–π –≤–≤–æ–¥!")
            return
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        self.encode_and_process()
        
    def encode_and_process(self):
        # –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.encoded_data = HammingCode.encode(self.original_data)
        
        # –í–Ω–µ—Å–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
        self.error_data = list(self.encoded_data)
        self.error_pos = random.randint(0, len(self.error_data) - 1)
        self.error_data[self.error_pos] = '0' if self.error_data[self.error_pos] == '1' else '1'
        
        # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.corrected_data, detected_error_pos = HammingCode.decode(''.join(self.error_data))
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.log_messages()
        
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
        self.visualize_hamming_code()
        
    def log_messages(self):
        # –û—Å–Ω–æ–≤–Ω—ã–µ –ª–æ–≥–∏ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
        self.log_text.append("üîç –ü–†–û–¶–ï–°–° –ö–û–î–ò–†–û–í–ê–ù–ò–Ø –ü–û –•–ï–ú–ò–ù–ì–£ üîç")
        self.log_text.append("\n1. –¢–ï–û–†–ï–¢–ò–ß–ï–°–ö–ò–ï –û–°–ù–û–í–´:")
        self.log_text.append("   - –ö–æ–¥ –•–µ–º–º–∏–Ω–≥–∞ - –º–µ—Ç–æ–¥ –ø–æ–º–µ—Ö–æ—É—Å—Ç–æ–π—á–∏–≤–æ–≥–æ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è")
        self.log_text.append("   - –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞—Ç—å –∏ –∏—Å–ø—Ä–∞–≤–ª—è—Ç—å –æ–¥–∏–Ω–æ—á–Ω—ã–µ –æ—à–∏–±–∫–∏")
        self.log_text.append("   - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ –±–∏—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏")

        self.log_text.append("\n2. –ü–†–ò–ù–¶–ò–ü –ö–û–ù–¢–†–û–õ–¨–ù–´–• –ë–ò–¢–û–í:")
        self.log_text.append("   - –ü–æ–∑–∏—Ü–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –±–∏—Ç–æ–≤: —Å—Ç–µ–ø–µ–Ω–∏ 2 (1, 2, 4, 8...)")
        self.log_text.append("   - –ö–∞–∂–¥—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π –±–∏—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –æ–±–ª–∞—Å—Ç—å")
        self.log_text.append("   - –ß–µ—Ç–Ω–æ—Å—Ç—å –±–∏—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫")

        self.log_text.append(f"\n3. –ò–°–•–û–î–ù–´–ï –î–ê–ù–ù–´–ï:")
        self.log_text.append(f"   - –ë–∏–Ω–∞—Ä–Ω—ã–π –∫–æ–¥: {self.original_data}")
        self.log_text.append(f"   - –î–ª–∏–Ω–∞: {len(self.original_data)} –±–∏—Ç")

        self.log_text.append("\n4. –≠–¢–ê–ü–´ –ö–û–î–ò–†–û–í–ê–ù–ò–Ø:")
        self.log_text.append(f"   - –ó–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {self.encoded_data}")
        self.log_text.append(f"   - –î–ª–∏–Ω–∞ –∫–æ–¥–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞: {len(self.encoded_data)} –±–∏—Ç")

        # –î–µ—Ç–∞–ª–∏ –≤–Ω–µ—Å–µ–Ω–∏—è –æ—à–∏–±–∫–∏
        self.log_text.append(f"\n5. –í–ù–ï–°–ï–ù–ò–ï –û–®–ò–ë–ö–ò:")
        self.log_text.append(f"   - –ü–æ–∑–∏—Ü–∏—è –æ—à–∏–±–∫–∏: {self.error_pos}")
        self.log_text.append(f"   - –ë–∏—Ç –¥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {self.encoded_data[self.error_pos]}")
        self.log_text.append(f"   - –ë–∏—Ç –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {self.error_data[self.error_pos]}")

        self.log_text.append("\n6. –ú–ï–•–ê–ù–ò–ó–ú –ü–û–ò–°–ö–ê –ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –û–®–ò–ë–ö–ò:")
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞
        self.log_error_detection_process()

        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
        if self.text_radio.isChecked():
            original_text = TextConverter.binary_to_text(self.original_data)
            corrected_text = TextConverter.binary_to_text(self.corrected_data)
            self.log_text.append(f"\n7. –¢–ï–ö–°–¢–û–í–û–ï –ü–†–ï–î–°–¢–ê–í–õ–ï–ù–ò–ï:")
            self.log_text.append(f"   - –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç: {original_text}")
            self.log_text.append(f"   - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: {corrected_text}")

    def log_error_detection_process(self):
        """–î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –æ—à–∏–±–∫–∏"""
        self.log_text.append("   a) –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö –±–∏—Ç–æ–≤:")
        
        # –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏
        r = 1
        error_syndrome = 0
        while 2**r < len(self.error_data) + 1:
            pos = 2**r - 1
            parity = 0
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–≥–æ –±–∏—Ç–∞
            for j in range(pos, len(self.error_data), 2**(r)):
                for k in range(j, min(j + 2**r, len(self.error_data))):
                    if self.error_data[k] == '1':
                        parity ^= 1
            
            self.log_text.append(f"     - –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π –±–∏—Ç {pos+1}: {'–û—à–∏–±–∫–∞' if parity != 0 else '–ö–æ—Ä—Ä–µ–∫—Ç–µ–Ω'}")
            
            if parity != 0:
                error_syndrome += pos + 1
            
            r += 1
        
        self.log_text.append(f"   b) –°–∏–Ω–¥—Ä–æ–º –æ—à–∏–±–∫–∏: {error_syndrome}")
        
        # –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å–∏–Ω–¥—Ä–æ–º–∞
        if error_syndrome > 0:
            self.log_text.append(f"   c) –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤ –ø–æ–∑–∏—Ü–∏–∏: {error_syndrome}")
            self.log_text.append("      - –°–∏–Ω–¥—Ä–æ–º —É–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ—á–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –∏—Å–∫–∞–∂–µ–Ω–Ω–æ–≥–æ –±–∏—Ç–∞")
        else:
            self.log_text.append("   c) –û—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
            
    def visualize_hamming_code(self):
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —ç—Ç–∞–ø–æ–≤ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        y_offset = 50
        self.add_bit_row("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", self.original_data, y_offset)
        
        y_offset += 100
        self.add_bit_row("–ó–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", self.encoded_data, y_offset)
        
        y_offset += 100
        self.add_bit_row("–î–∞–Ω–Ω—ã–µ —Å –æ—à–∏–±–∫–æ–π", ''.join(self.error_data), y_offset, error_pos=self.error_pos)
        
        y_offset += 100
        self.add_bit_row("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", self.encoded_data, y_offset, error_pos=self.error_pos)
        
        y_offset += 100
        self.add_bit_row("–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", self.corrected_data, y_offset)
        
    def add_bit_row(self, label, data, y_offset, error_pos=None):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å —Ç–æ—á–Ω—ã–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º –æ—à–∏–±–∫–∏"""
        # –ú–µ—Ç–∫–∞
        text_item = self.scene.addText(label, QFont("Arial", 12, QFont.Bold))
        text_item.setPos(10, y_offset)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±—É–∫–≤ –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        letters = []
        if self.text_radio.isChecked() and label == "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ":
            letters = list(self.input_field.text())
        
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ 8 –±–∏—Ç
        grouped_data = [data[i:i+8] for i in range(0, len(data), 8)]
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —à–∏—Ä–∏–Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        container_width = len(grouped_data) * 80
        container_height = 70
        horizontal_spacing = 10
        
        for group_index, group in enumerate(grouped_data):
            # –†–∞—Å—á–µ—Ç —Ç–æ—á–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            x_pos = 250 + group_index * (container_width + horizontal_spacing)
            
            # –°—Ç–∏–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            group_rect = self.scene.addRect(
                x_pos, 
                y_offset, 
                container_width, 
                container_height, 
                QPen(Qt.black, 1, Qt.SolidLine), 
                QBrush(QColor(250, 250, 250))
            )
            
            # –ë–∏—Ç—ã –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º
            bit_width = 24
            padding = (container_width - len(group) * bit_width) // (len(group) + 1)
            
            for bit_in_group, bit in enumerate(group):
                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –±–∏—Ç–∞
                global_bit_index = group_index * 8 + bit_in_group
                
                # –¶–≤–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π —Å –æ—à–∏–±–∫–æ–π
                if (label in ["–î–∞–Ω–Ω—ã–µ —Å –æ—à–∏–±–∫–æ–π", "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"] 
                    and error_pos is not None 
                    and global_bit_index == error_pos):
                    color = self.soft_blue  # –¶–≤–µ—Ç –æ—à–∏–±–∫–∏
                else:
                    color = QColor(100, 200, 100) if bit == '1' else QColor(200, 100, 100)
                
                rect = self.scene.addRect(
                    x_pos + padding + bit_in_group * (bit_width + padding), 
                    y_offset + 20, 
                    bit_width, 
                    25, 
                    QPen(Qt.black), 
                    QBrush(color)
                )
                
                # –¢–µ–∫—Å—Ç –±–∏—Ç–∞
                bit_text = self.scene.addText(bit, QFont("Arial", 9, QFont.Bold))
                bit_text.setPos(
                    x_pos + padding + bit_in_group * (bit_width + padding) + 3, 
                    y_offset + 22
                )
            
            # –ù–∞–¥–ø–∏—Å—å –±—É–∫–≤—ã –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è
            if label == "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" and letters and group_index < len(letters):
                letter_text = self.scene.addText(
                    letters[group_index], 
                    QFont("Arial", 10, QFont.Bold)
                )
                letter_text.setPos(
                    x_pos + container_width // 4, 
                    y_offset + container_height
                )
            

def main():
    app = QApplication(sys.argv)
    visualizer = HammingCodeVisualizer()
    visualizer.show()
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()